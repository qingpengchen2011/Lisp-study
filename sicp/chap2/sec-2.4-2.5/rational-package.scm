(define (install-rational-package)
    (define (number x) (car x))
    (define (denom x) (cdr x))
    (define (make-rat n d)
         (let ((g (gcd n d)))
              (cons (/ n g) (/ d g))))
    (define (add-rat x y)
         (make-rat (+ (* (number x) (denom y))
                      (* (number y) (denom x)))
		   (* (denom x) (denom y))))
    (define (sub-rat x y)
         (make-rat (- (* (number x) (denom y))
                      (* (number y) (denom x)))
		   (* (denom x) (denom y))))
    (define (mul-rat x y)
         (make-rat (* (number x) (number y))
		   (* (denom x) (denom y))))
    (define (div-rat x y)
         (make-rat (* (number x) (denom y))
		   (* (denom x) (number y))))
    (define (equ-rat x y)
        (let ((rat1 (make-rat (number x) (denom x)))
	      (rat2 (make-rat (number y) (denom y))))
             (and (= (number rat1) (number rat2))
    		  (= (denom rat1) (denom rat2)))))
    (define (zero-rat x)
        (= (number x) 0))
  
    (define (tag x) (attach-tag 'rational x))
    (put 'add '(rational rational)
        	(lambda (x y) (tag (add-rat x y)))) 
    (put 'sub '(rational rational)
		(lambda (x y) (tag (sub-rat x y))))
    (put 'mul '(rational  rational)
		(lambda (x y) (tag (mul-rat x y))))
    (put 'div '(rational rational)
		(lambda (x y) (tag (div-rat x y))))
    (put 'make 'rational
		(lambda (n d) (tag (make-rat n d))))

    ;;132-exercise-2.79
    (put 'equ? '(rational rational) equ-rat)
    ;;132-exercise-2.80
    (put 'zero? '(rational)  zero-rat)
    'done)


