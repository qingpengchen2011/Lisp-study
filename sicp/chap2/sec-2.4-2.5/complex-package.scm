(define (install-complex-package)
    (load "tag-content.scm")
    (load "commom-interface-for-polar-rectangular.scm")
    (define (make-from-real-imag x y)
        ((get 'make-from-real-imag 'rectangular) x y))
    (define (make-from-mag-ang r a)
        ((get 'make-from-mag-ang 'polar) r a))
    (define (add-complex z1 z2)
        (make-from-real-imag (+ (myreal-part z1) (myreal-part z2))
			     (+ (myimag-part z1) (myimag-part z2))))
    (define (sub-complex z1 z2)
        (make-from-real-imag (- (myreal-part z1) (myreal-part z2))
			     (- (myimag-part z1) (myimag-part z2))))
    (define (mul-complex z1 z2)
        (make-from-mag-ang (* (mymagnitude z1) (mymagnitude z2))
			   (+ (myangle z1) (myangle z2))))
    (define (div-complex z1 z2)
        (make-from-mag-ang (/ (mymagnitude z1) (mymagnitude z2))
			   (- (myangle z1) (myangle z2))))
    (define (equ-complex z1 z2)
        (and (= (myreal-part z1) (myreal-part z2))
	     (= (myimag-part z1) (myimag-part z2))))
    (define (zero-complex z)
        (and (= (myreal-part z) 0)
             (= (myimag-part z) 0)))
    
    (define (tag x)  (attach-tag 'complex x))
    (put 'add '(complex complex) (lambda (x y) (tag (add-complex x y))))
    (put 'sub '(complex complex) (lambda (x y) (tag (sub-complex x y))))
    (put 'mul '(complex complex) (lambda (x y) (tag (mul-complex x y))))
    (put 'div '(complex complex) (lambda (x y) (tag (div-complex x y))))
    (put 'make-from-real-imag 'complex (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang 'complex (lambda (x y) (tag (make-from-mag-ang x y))))
    (put 'real-part '(complex) myreal-part)
    (put 'imag-part '(complex) myimag-part)
    (put 'magnitude '(complex) mymagnitude)
    (put 'angle '(complex) myang)
    ;;132-exercise-2.79
    (put 'equ? '(complex complex) equ-complex)
    ;;132-exercise-2.80
    (Put 'zero? '(complex) zero-complex)
    'done)
