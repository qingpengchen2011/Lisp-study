(define (make-account balance password)
    (define (withdraw amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount))
		   balance)
	    "Insufficient funds"))
    (define (desposit amount)
        (set! balance (+ balance amount))
	balance)
    (define (display-wrong-passw-message useless)
        (display "Incorrect password"))
    (let ((passwordlist '())
          (this '()))
         (define (correct-password? passwordlist passw)
             (cond ((null? passwordlist) '#f)
                   ((eq? (car passwordlist) passw) '#t)
                   (else (correct-password? (cdr passwordlist) passw))))
         (define (add-to-passwordlist new-pass)
             (set! passwordlist (cons new-pass passwordlist)))
         (define (dispatch passw m)
             (if (correct-password? passwordlist passw)
	         (begin (cond ((eq? m 'withdraw) withdraw)
		              ((eq? m 'desposit) desposit)
                              ((eq? m 'add-passw) add-to-passwordlist)
                              (else (error "Unknown request--MAKE-ACCOUNT" m))))
                                 display-wrong-passw-message))
         (add-to-passwordlist password)
         dispatch))

(define (make-join ori-acc ori-pass new-pass)
    ((ori-acc ori-pass 'add-passw) new-pass)
    ori-acc)
    
;;---------------------------------------------------
;;; 7-make-joint.scm

(define (make-joint-1  origin-acc origin-password another-password)
    (lambda (given-password mode)
        (if (eq? given-password another-password)
            (origin-acc origin-password mode)
            display-wrong-another-password-message)))

(define (display-wrong-another-password-message useless-arg)
    (display "Incorrect another password")) 
