(define (make-tree)
    (let ((root '()))
	;;representation of record
        (define (make-record key value)
            (cons key value))
        (define (key record)
	    (car record))
	(define (value record)
  	    (cdr record))
        (define (set-value! record value)
            (set-cdr! record value))
	;;representation of tree-node	
	(define (make-node record left-tree right-tree)
	    (list record left-tree right-tree))
	(define (record node)
	    (car node))
	(define (left-tree node)
  	    (cadr node))
	(define (right-tree node)
 	    (caddr node))
	(define (set-record! node record)
	    (set-car! node record))
	(define (set-left-tree! node left-tree)
	    (set-car! (cdr node) left-tree))
	(define (set-right-tree! node right-tree)
	    (set-car! (cddr node) right-tree))
        ;;tree procedures
	(define (tree-lookup node k)
            (cond ((null? node) '#f)
		  ((= (key (record node)) k) (record node))
		  ((< (key (record node)) k) (tree-lookup (right-tree node) k))
		  (else
		      (tree-lookup (left-tree node) k))))
        (define (tree-insert! node father-node new-record)
	    (cond ((null? node)
			(let ((new-node (make-node new-record '() '())))
			    (if (null? father-node)
				(set! root new-node)
				(cond ((< (key new-record) (key (record father-node)))
				          (set-left-tree! father-node new-node))
				      (else
					  (set-right-tree! father-node new-node))))))
	          ((= (key (record node)) (key new-record)) (set-record! node new-record))
		  ((< (key (record node)) (key new-record)) (tree-insert! (right-tree node) node new-record))
		  (else
		      (tree-insert! (left-tree node) node new-record)))
	    'ok)
	;;interface
        (define (lookup key)
            (tree-lookup root key))
        (define (insert! key value)
	    (tree-insert! root '()  (make-record key value)))
	(define (print-tree)
	    root)
	(define (dispatch m)
	    (cond ((eq? m 'lookup) lookup)
		  ((eq? m 'insert!) insert!)
		  ((eq? m 'print) print-tree)
		  (else
		     (error "UNKNOWN-COMMAND" m))))
        dispatch))

;(define tree-operation (make-tree))
;(define put (tree-operation 'insert!))
;(define get (tree-operation 'lookup))
;(define print (tree-operation 'print))
