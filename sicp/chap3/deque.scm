(define (make-deque)
    (define (make-pointer forward next)
        (cons forward next))
    (define (forward-ptr pointer)
        (car pointer))
    (define (next-ptr pointer)
        (cdr pointer))
    (define (set-forward! pointer forward-ptr)
        (set-car! pointer forward-ptr))
    (define (set-next! pointer next-ptr)
        (set-cdr! pointer next-ptr))
    
    (define (make-pair item pointer)
        (cons item pointer))
    (define (get-item pair)
        (car pair))
    (define (get-pointer pair)
        (cdr pair))
    (define (set-item pair item)
        (set-car! pair item))
    (define (set-pointer pair pointer)
        (set-cdr! pair pointer))
    (let ((front-ptr '())
          (rear-ptr '()))
         (define (get-front-ptr) front-ptr)
	 (define (get-rear-ptr) rear-ptr)
         (define (empty-deque?)
             (or (null? front-ptr)
		 (null? rear-ptr)))
         (define (set-front-ptr! pair)
             (set! front-ptr pair))
         (define (set-rear-ptr! pari)
             (set! rear-ptr pari))
	 (define (front-deque)
	     (if (empty-deque?)
	         (error "FRONT called with an empty deque")
	         (get-item front-ptr)))
         (define (rear-deque)
             (if (empty-deque?)
		 (error "REAR called with an empty queue")
	         (get-item rear-ptr)))
         (define (front-insert-deque! item)
             (let ((new-pair (make-pair item
			                (make-pointer '() ()))))
		  (if (empty-deque?)
		      (begin (set-front-ptr! new-pair)
			     (set-rear-ptr! new-pair))
		      (begin (set-next! (get-pointer new-pair) front-ptr)
			     (set-forward! (get-pointer front-ptr) new-pair)
			     (set-front-ptr! new-pair)))
		  (print-deque)))
        (define (rear-insert-deque! item)
            (let ((new-pair (make-pair item
				       (make-pointer '() '()))))
		 (if (empty-deque?)
		     (begin (set-front-ptr! new-pair)
			    (set-rear-ptr! new-pair))
		     (begin (set-forward! (get-pointer new-pair) rear-ptr)
			    (set-next! (get-pointer rear-ptr) new-pair)
			    (set-rear-ptr! new-pair)))
		 (print-deque)))
             
        (define (front-delete-deque!)
            (cond  ((empty-deque?) (error "DELETE called with an empty deque"))
		   ((eq? front-ptr rear-ptr) 
			(begin (set-front-ptr! '())
		               (set-rear-ptr! '())))
  	           (else
			(let ((old-front front-ptr))
		      	     (set-front-ptr! (next-ptr (get-pointer old-front)))
		      	     (set-forward! (get-pointer front-ptr) '())
		             (set-next! (get-pointer old-front) '()))))

	    (print-deque))

        (define (rear-delete-deque!)
	    (cond ((empty-deque?) (error "DELETE called with an empty deque"))
		  ((eq? front-ptr rear-ptr)
			(begin (set-front-ptr! '())
			       (set-rear-ptr! '())))
		  (else
	    		(let ((old-rear rear-ptr))
		 	     (set-rear-ptr! (forward-ptr (get-pointer old-rear)))
		             (set-next! (get-pointer rear-ptr) '())
		             (set-forward! (get-pointer old-rear) '()))))
	    (print-deque))
        (define (print-deque)
	    (define (iter front)
	        (if (null? front)
		    '()
		    (cons (get-item front)
			  (iter (next-ptr (get-pointer front))))))
            (iter front-ptr))

        (define (dispatch m)
	    (cond ((eq? m 'print) print-deque)
		  ((eq? m 'rear-delete-deque) rear-delete-deque!)
		  ((eq? m 'front-delete-deque) front-delete-deque!)
		  ((eq? m 'rear-insert-deque) rear-insert-deque!)
		  ((eq? m 'front-insert-deque) front-insert-deque!)
		  ((eq? m 'empty?) empty-deque?)
		  ((eq? m 'front-deque) front-deque)
		  ((eq? m 'rear-deque) rear-deque)
		  (else
			(error "unknow commnad" m))))
        dispatch))
