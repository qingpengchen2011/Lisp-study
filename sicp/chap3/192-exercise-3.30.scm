(defne (half-adder a b s c)
    (let ((d (make-wire))
	  (e (make-wire)))
	 (or-gate a b d)
         (and-gate a b c)
         (inverter c e)
         (and-gate d e s)
         'ok))

(define (full-adder a b c-in sum c-out)
    (let ((s (make-wire))
	  (c1 (make-wire))
   	  (c2 (make-wire)))
	 (half-adder b c-in s c1)
         (half-adder a s sum c2)
         'ok))

(define (ripple-carry-adder list-a list-b list-s C)
    (if (null? list-a) 
	(set-signal! C 0)
	(let (C-in-out (make-wire))
             (full-adder (car list-a)
			 (car list-b)
			 C-in-out
			 (car list-s)
			 C)
	     (ripple-carry-adder (cdr list-a)
				 (cdr list-b)	
				 (cdr list-s)
				 C-in-out)))
    'ok)
;;delay-ripple-carry-adder:
;;=(* n (delay-full-adder))
;;=(* n (half-adder half-adder or-gate))
;;=(* n (+ or-gate 
;;      (* 2 (+ (max (or-gate (+ and-gate inverter)) and-gate)))))
